# based on https://angeloavv.medium.com/how-to-distribute-flutter-desktop-app-binaries-using-github-actions-f8d0f9be4d6b
# TODO auto incerment versions.

name: Flutter CI

# Controls when the workflow will run
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-ecg"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a set of commands using the runners shell
      - name: Customizing
        run: |
          chmod +x customize
          ./customize
      - name: Artefact customized version
        uses: actions/upload-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
          path: mml.administration-app
        
  build-and-release-linux:
    # TODO create linux rpm and debian packages
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsecret-1-0 libjsoncpp1
      - name: Install project dependencies
        run: flutter pub get
      - name: Generate intermediates
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter gen-l10n
      - name: Enable linux build
        run: flutter config --enable-linux-desktop
      - name: Build artifacts
        run: |
          flutter build linux --release
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ECG-Medialib-Admin-${{github.ref_name}}-linux.zip
          directory: build/linux/x64/release/bundle
      - name: Linux Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/linux/x64/release/bundle/ECG-Medialib-Admin-${{github.ref_name}}-linux.zip
  
  build-and-release-windows:
    runs-on: windows-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Prepare sign key
        env:
           PFX_CONTENT: ${{ secrets.SIGN_KEY }}
        run: |
           $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ecg_sign.pfx";
           $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT);
           [IO.File]::WriteAllBytes($pfxPath, $encodedBytes)
           Write-Output "::set-output name=PFX_PATH::$pfxPath";
        id: create-pfx
        shell: pwsh
      - uses: actions/download-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
      - name: Install project dependencies
        run: flutter pub get
      - name: Generate intermediates
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter gen-l10n
      - name: Enable windows build
        run: flutter config --enable-windows-desktop
      - name: Build artifacts
        run: |
          $version = "${{ github.ref_name }}"
          $ver_dump = $version.replace('-ecg', '.0')
          flutter build windows --release
          flutter pub run msix:create --version $ver_dump -c ${{ steps.create-pfx.outputs.PFX_PATH }} -p ${{ secrets.SIGN_PASS }} -u ECG -b ${{ secrets.SIGN_SUB }}
          mkdir rel
          echo "Before installing app. Install the publisher public key in your Computer Certmanager as Trusted CA Cert, so the publisher will be trusted on your machine." > rel/README_FIRST.txt
          cp ecg_sign.cer rel/ecg_sign.cer
          mv  build/windows/runner/Release/mml_admin.msix rel/ECG-Medialib-Admin-${{github.ref_name}}.msix
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ECG-Medialib-Admin-${{github.ref_name}}-windows.zip
          directory: rel
      - name: Windows Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: rel/ECG-Medialib-Admin-${{github.ref_name}}-windows.zip
      - name: Cleanup
        run: |
           Remove-Item -Path ${{ steps.create-pfx.outputs.PFX_PATH }};
  
 # build-and-release-macos:
 #   runs-on: macos-latest
 #   needs: [prepare]
 #   steps:
 #     - uses: actions/checkout@v3
 #     - uses: actions/download-artifact@v3
 #       with:
 #         name: ECG-Medialib-Admin-Custom
 #     - uses: subosito/flutter-action@v1
 #       with:
 #         channel: 'stable'
 #         flutter-version: '2.10.0'
 #     - name: Install project dependencies
 #       run: flutter pub get
 #     - name: Generate intermediates
 #       run: |
 #         flutter pub run build_runner build --delete-conflicting-outputs
 #         flutter gen-l10n
 #     - name: Enable macOS build
 #       run: flutter config --enable-macos-desktop
 #     - name: Build artifacts
 #       run: flutter build macos --release
 #     - name: Archive Release
 #       uses: thedoctor0/zip-release@master
 #       with:
 #         type: 'zip'
 #         filename: ECG-Medialib-Admin-${{github.ref_name}}-macos.zip
 #         directory: build/macos/Build/Products/Release
 #     - name: macOS Release
 #       uses: softprops/action-gh-release@v1
 #       if: startsWith(github.ref, 'refs/tags/')
 #       env:
 #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 #       with:
 #         files: build/macos/Build/Products/Release/ECG-Medialib-Admin-${{github.ref_name}}-macos.zip
