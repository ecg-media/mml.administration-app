# based on https://angeloavv.medium.com/how-to-distribute-flutter-desktop-app-binaries-using-github-actions-f8d0f9be4d6b
# TODO auto incerment versions.

name: Flutter CI

# Controls when the workflow will run
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-ecg"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a set of commands using the runners shell
      - name: Customizing
        run: |
          version="${{ github.ref_name }}"
          ver_dump=$(echo "${version/-ecg/''}")
          chmod +x customize
          ./customize
          sed -i -E "s/version: [0-9]+.[0-9]+.[0-9]+\+[0-9]+/version: $ver_dump+${{github.run_number}}/" "./mml.administration-app/pubspec.yaml"
          sed -i -E "s/#define VERSION_AS_STRING \"1.0.0\"/#define VERSION_AS_STRING \"$ver_dump\"/" "./mml.administration-app/windows/runner/Runner.rc"
          sed -i -E "s/ DEVELOPMENT_TEAM = S79Z2R2WAC;/ DEVELOPMENT_TEAM = ${{ secrets.APPLE_TEAM_ID }};/" "./mml.administration-app/macos/Runner.xcodeproj/project.pbxproj"
      - name: Artefact customized version
        uses: actions/upload-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
          path: mml.administration-app
        
  build-and-release-linux:
    # TODO create linux rpm and debian packages
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsecret-1-0
      - name: Install project dependencies
        run: flutter pub get
      - name: Generate intermediates
        run: |
          dart run build_runner build --delete-conflicting-outputs
          flutter gen-l10n
      - name: Enable linux build
        run: flutter config --enable-linux-desktop
      - name: Build artifacts
        run: |
          flutter build linux --release
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ECG-Medialib-Admin-${{github.ref_name}}-linux.zip
          directory: build/linux/x64/release/bundle
      - name: Linux Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/linux/x64/release/bundle/ECG-Medialib-Admin-${{github.ref_name}}-linux.zip
  
  build-and-release-windows:
    runs-on: windows-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Prepare sign key
        env:
           PFX_CONTENT: ${{ secrets.SIGN_KEY }}
        run: |
           $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ecg_sign.pfx";
           $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT);
           [IO.File]::WriteAllBytes($pfxPath, $encodedBytes)
           Write-Output "::set-output name=PFX_PATH::$pfxPath";
        id: create-pfx
        shell: pwsh
      - uses: actions/download-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
      - name: Install project dependencies
        run: flutter pub get
      - name: Generate intermediates
        run: |
          dart run build_runner build --delete-conflicting-outputs
          flutter gen-l10n
      - name: Enable windows build
        run: flutter config --enable-windows-desktop
      - name: Build artifacts
        run: |
          $version = "${{ github.ref_name }}"
          $ver_dump = $version.replace('-ecg', '.0')
          flutter build windows --release
          dart run msix:create --version $ver_dump --install-certificate false -c ${{ steps.create-pfx.outputs.PFX_PATH }} -p ${{ secrets.SIGN_PASS }} -u ECG -b "${{ secrets.SIGN_SUB }}"
          mkdir rel
          echo "Before installing app. Install the publisher public key in your Computer Certmanager as Trusted CA Cert, so the publisher will be trusted on your machine." > rel/README_FIRST.txt
          cp ecg_sign.cer rel/ecg_sign.cer
          mv  build/windows/x64/runner/Release/mml_admin.msix rel/ECG-Medialib-Admin-${{github.ref_name}}.msix
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ECG-Medialib-Admin-${{github.ref_name}}-windows.zip
          directory: rel
      - name: Windows Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: rel/ECG-Medialib-Admin-${{github.ref_name}}-windows.zip
      - name: Cleanup
        run: |
           Remove-Item -Path ${{ steps.create-pfx.outputs.PFX_PATH }};
  
  build-and-release-macos:
    runs-on: macos-latest
    needs: [prepare]
    env:
      MACOS_APP_RELEASE_PATH: build/macos/Build/Products/Release
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ECG-Medialib-Admin-Custom
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install project dependencies
        run: flutter pub get
      - name: Generate intermediates
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter gen-l10n
      - name: Enable macOS build
        run: flutter config --enable-macos-desktop
      - name: Prepare keychain
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MACOS_PROVISIONING_PROFILE: ${{ secrets.MACOS_PROVISIONING_PROFILE_B64 }}
          MACOS_PROVISION_PROFILE_UID: ${{ secrets.MACOS_PROVISION_PROFILE_UID }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          echo -n "$MACOS_PROVISIONING_PROFILE" | base64 --decode --output $PP_PATH
          echo -n "$MACOS_PROVISIONING_PROFILE" | base64 --decode --output build_pp.mobileprovision
          echo "Create Keychain"
          security create-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          echo "Assign to Login Keychain"
          security default-keychain -s build.keychain
          echo "Unlock the Login Keychain"
          security unlock-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
          echo "Import certificate"
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          echo "Set Key Partition"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CERTIFICATE_PWD" build.keychain
          echo "Find Identity"
          security find-identity
          echo "apply provisioning profile"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cat ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
   #   - name: Build app 
   #     run: |
   #       flutter build macos --release
   #   - name: Codesign executable
   #     env:
   #       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
   #     run: |
   #       echo "Sign the app"
   #       /usr/bin/codesign --force --deep -s $APPLE_TEAM_ID "./$MACOS_APP_RELEASE_PATH/ECG Mediathek.app"
   #   - name: Create a dmg
   #     run: |
  #        echo "Install create-dmg"
   #       brew install create-dmg
    #      cd $MACOS_APP_RELEASE_PATH
     #     create-dmg \
      #      --volname "ECG Mediathek" \
       #     --window-pos 200 120 \
        #    --window-size 800 529 \
         #   --icon-size 130 \
          #  --text-size 14 \
          #  --icon "ECG Mediathek.app" 260 250 \
          #  --hide-extension "ECG Mediathek.app" \
          #  --app-drop-link 540 250 \
          #  --hdiutil-quiet \
          #  "ECG-Medialib-Admin-${{github.ref_name}}-macos.dmg" \
          #  "ECG Mediathek.app"
      - name: macOS Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           files: |
             certificate.p12
             build_pp.mobileprovision
          #files: build/macos/Build/Products/Release/ECG-Medialib-Admin-${{github.ref_name}}-macos.dmg
